/*
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]
Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]
Explanation:
After merging the two 
non-decreasing arrays, we get, 
0 1 2 3 5 6 7 8 9.

*/

//SOLUTION 1: SWAPPING AND SORTING
void merge(long long arr1[], long long arr2[], int n, int m)
{
    for (int i = 0; i < n; i++)
    {
        if (arr1[i] > arr2[0])
        {
            int temp = arr1[i];
            arr1[i] = arr2[0];
            arr2[0] = temp;
            sort(arr2, arr2 + m);
        }
    }
}

//SOLUTION 2 : GAP METHOD
/*
- Here we use two pointers: head pointer stays with left array and tail pointer with right array

- we swap if element at head > element at tail. (try to keep smaller elements to the left)

- gap is chosen to be the ceil value of (left_size + right_size)/2

- gap is decremented until it is = 1

- This approach has three parts-

    1. comparing elements in left array 

        - only when gap < left array size
        - until (head + gap) < left_size
        - if gap is more than size of left array then we omit point 1

    2. comparing elements bw left and right array

        - while (head < left_size) && (tail < right_size)
        - starting point of tail is decided by the difference bw gap and left_size
            - if gap > left_size: tail = gap - left_size
            - if gap <= left_size: tail = 0

    3. comparing elements in right array
    
        - can always start at tail = 0
        - until (tail + gap) < right_size
*/
int nextGap(int gap)
{
    if (gap <= 1)
        return 0;
    return (gap / 2) + (gap % 2);
}

void merge(long long arr1[], long long arr2[], int n, int m)
{
    int head, tail, gap = nextGap(m + n);
    while (gap > 0)
    {
        //comparing elements in first array
        for (head = 0; (head + gap) < n; head++)
            if (arr1[head] > arr1[head + gap])
                swap(arr1[head], arr1[head + gap]);

        //comparing elements b/w two arrays
        for (tail = (gap > n) ? gap - n : 0; head < n && tail < m; head++, tail++)
            if (arr1[head] > arr2[tail])
                swap(arr1[head], arr2[tail]);

        //comparing elements in second array
        if (tail < m)
            for (tail = 0; (tail + gap) < m; tail++)
                if (arr2[tail] > arr2[tail + gap])
                    swap(arr2[tail], arr2[tail + gap]);

        gap = nextGap(gap);
    }
}